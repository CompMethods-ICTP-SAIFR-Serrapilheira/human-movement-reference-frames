source("C:/Workflow/Compare referentials/fct/fit_MED.R")
source("C:/Workflow/Compare referentials/fct/analyse_elements_MED.R")
debugSource("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
View(segments)
plot(v[segments[20,1]:segments[20,2]])
plot(v[segments[19,1]:segments[19,2]])
plot(v[segments[1,1]:segments[1,2]])
plot(v[segments[2,1]:segments[2,2]])
plot(v[segments[3,1]:segments[3,2]])
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
debugSource("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
plot(v[segments[3,1]:segments[3,2]])
plot(v[seg_i[1]:seg[f])
plot(v[seg_i[1]:seg[f]])
plot(v[seg_i[1]:seg_f[1]])
plot(v[seg_i[2]:seg_f[2]])
plot(v[seg_i[3]:seg_f[3]])
plot(v[seg_i[4]:seg_f[4]])
plot(v[seg_i[5]:seg_f[5]])
plot(v[seg_i[59]:seg_f[59]])
plot(v[segments[3,1]:segments[3,2]])
plot(v[segments[1,1]:segments[1,2]])
plot(v[segments[3,1]:segments[3,2]])
plot(v[segments[1,1]:segments[1,2]])
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
debugSource("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
plot(v[seg_i[9]:seg_f[9]])
seg_f[9]
v[seg_f[9]]
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
debugSource("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
plot(v[seg_i[42]:seg_f[42]])
v[seg_f[i]]
v[seg_f[i]-1]
abs(v[seg_f[i]])>abs(v[seg_f[i]-1])
plot(v[segments$seg_i[i] : segments$seg_f[i]])
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
debugSource("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
plot(v[segments$seg_i[i] : segments$seg_f[i]])
debugSource("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
debugSource("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
length(v)
source("C:/Workflow/Compare referentials/fct/analyse_elements_MED.R")
debugSource("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/fct/analyse_elements_MED.R")
debugSource("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/fct/analyse_elements_MED.R")
debugSource("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
plot(v[segments$seg_i[20] : segments$seg_f[20]])
View(segments)
plot(v[segments$seg_i[28] : segments$seg_f[28]])
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
source("C:/Workflow/Compare referentials/R/1_data_filtering.R", echo=TRUE)
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/fct/analyse_elements_MED.R")
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
296-262
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
warnings()
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
View(x_segments)
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
name_output <- basename(path_inertial)
name_output[1]
library(stringi)
name_output <- stri_sub(name_output, 1, 10)
source("C:/Workflow/Compare referentials/fct/analyse_elements_MED.R")
source("C:/Workflow/Compare referentials/R/1_data_filtering.R", echo=TRUE)
#install.packages("stringi")
library(stringi)
library(signal)
low_pass <- 10                                                                  # Low pass filter frequency
order <- 4                                                                      # Low pass filter order
R_markers <- c("RHMC2", "RUSP")                                                 # Markers for right-arm movements
L_markers <- c("LHMC2", "LUSP")                                                 # Markers for left-arm movements
data_path <- list.files(path = "data/raw/csv",                                  # List all .csv data paths
pattern = "csv$",
recursive = TRUE,
full.names = TRUE)
data_names <- gsub(".csv", "", basename(data_path), fixed = TRUE)               # List all data names
data_laterality <- stri_sub(data_names, -3, -3)                                 # Checking the laterality of the movement ("R" = right, "L" = left)
number_data <- length(data_names)
for(i_data in seq(1, number_data)){
# Reading file and creating the vectors --------------------------------------
data <- read.csv(data_path[i_data])
if(data_laterality[i_data] == "R"){                                           # Selecting the marker corresponding to the laterality of i_data
markers <- R_markers
}
else{
markers <- L_markers
}
time <- data[data$marker == markers[1], 2]                                    # Time column
inert <- data[data$marker == markers[1], 3 : 5]                               # Data of movement with inertial referential (laboratory)
ref_non_inert <- data[data$marker == markers[2], 3 : 5]                       # Data of movement of the non-inertial referential
freq_sample <- 1/(data$t[2] - data$t[1])                                      # Calculating the data capture frequency
# Filtration process ---------------------------------------------------------
bf <- butter(order, 1/low_pass)                                               # Low-pass filter process
for(ax in seq(1, 3)){
inert[, ax] <- filtfilt(bf, inert[, ax])
ref_non_inert[, ax] <- filtfilt(bf, ref_non_inert[, ax])
}
non_inert <- inert - ref_non_inert                                            # Data of movement with non-inertial referential
# Calculating velocities and filling data frames -----------------------------
inert$vx <- c(diff(inert$x)*freq_sample, 0)
inert$vy <- c(diff(inert$y)*freq_sample, 0)
inert$vz <- c(diff(inert$z)*freq_sample, 0)
inert$t <- time
inert <- inert[freq_sample:(length(inert$x)-freq_sample),]
non_inert$vx <- c(diff(non_inert$x)*freq_sample, 0)
non_inert$vy <- c(diff(non_inert$y)*freq_sample, 0)
non_inert$vz <- c(diff(non_inert$z)*freq_sample, 0)
non_inert$t <- time
non_inert <- non_inert[freq_sample:(length(non_inert$x)-freq_sample),]
# Saving Files ---------------------------------------------------------------
name_file <- stri_sub(data_names[i_data], 1, 10)                              # Setting the name of the filtered file
dir_inert <- "./data/processed/filtered_data/inertial/"                       # Directories where the files will be saved
dir_non_inert <- "./data/processed/filtered_data/non_inertial/"
if (!dir.exists(dir_inert)) {dir.create(dir_inert, recursive = TRUE)}         # Creating the directories
if (!dir.exists(dir_non_inert)) {dir.create(dir_non_inert, recursive = TRUE)}
write.csv(inert, paste(dir_inert, name_file, "_inertial.csv",
sep=""), row.names = FALSE)
write.csv(non_inert, paste(dir_non_inert, name_file, "_non_inertial.csv",
sep=""), row.names = FALSE)
}
debugSource("C:/Workflow/Compare referentials/R/1_data_filtering.R", echo=TRUE)
markers[1]
View(data)
debugSource("C:/Workflow/Compare referentials/R/1_data_filtering.R", echo=TRUE)
debugSource("C:/Workflow/Compare referentials/R/1_data_filtering.R", echo=TRUE)
source("C:/Workflow/Compare referentials/R/1_data_filtering.R", echo=TRUE)
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
debugSource("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
?type
typeof(t)
typeof(x)
typeof(x_segments)
typeof(c(0,1))
?c
source("C:/Workflow/Compare referentials/fct/analyse_elements_MED.R")
typeof(0.2)
a= 0.2
typeof(2)
typeof(a)
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
source("C:/Workflow/Compare referentials/fct/analyse_elements_MED.R")
source("C:/Workflow/Compare referentials/fct/analyse_elements_MED.R")
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
source("C:/Workflow/Compare referentials/fct/segment_MED.R")
View(y_indices)
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
source("C:/Workflow/Compare referentials/R/2_movement_element_decomposition.R", echo=TRUE)
indices_MED <- read.data("./output/indices_MED.csv")
indices_MED <- read.csv("./output/indices_MED.csv")
View(indices_MED)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
VarCorr(model1)
summary(model)                                                                  #
library(lme4)
indices_MED <- read.csv("./output/indices_MED.csv")                             # Reading output table
model <- lme4::lmer(W_elements ~ referential_elements + (1|ind_output),         #
indices_MED)
null_model <- lme4::lmer(W_elements ~  1  + (1|ind_output), indices_MED)        #
summary(model)                                                                  #
model <- lme4::lmer(W_elements ~ referential_elements + (1|ind_output),         #
indices_MED)
null_model <- lme4::lmer(W_elements ~  1  + (1|ind_output), indices_MED)        #
summary(model)                                                                  #
anova(model, null_model)
(model)
anova(model, null_model)
(model)
anova(model, null_model)
VarCorr(model)
(model)
?lme4
?anova
git push
# Load dataset from github
indices <- read.csv("./output/mean_indices_MED.csv")
# Load dataset from github
indices <- read.csv("./output/mean_indices_MED.csv")
ggplot(aes(x = c("W", "R²"), y = c(indices$W_mean_diff, indices$R2_mean_diff), fill =  c("W", "R²"))) +
geom_violin(width = 2.1, size = 0.3) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none"
)
library(ggplot2)
ggplot(aes(x = c("W", "R²"), y = c(indices$W_mean_diff, indices$R2_mean_diff), fill =  c("W", "R²"))) +
geom_violin(width = 2.1, size = 0.3) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none"
)
p <- data %>%
ggplot(aes(x = c("W", "R²"), y = c(indices$W_mean_diff, indices$R2_mean_diff), fill =  c("W", "R²"))) +
geom_violin(width = 2.1, size = 0.3) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none"
)
library(dplyr)
p <- data %>%
ggplot(aes(x = c("W", "R²"), y = c(indices$W_mean_diff, indices$R2_mean_diff), fill =  c("W", "R²"))) +
geom_violin(width = 2.1, size = 0.3) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none"
)
p <- data %>%
ggplot(aes(x = data, y = c(indices$W_mean_diff, indices$R2_mean_diff), fill =  data)) +
geom_violin(width = 2.1, size = 0.3) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none"
)
library(ggplot2)
library(dplyr)
library(tidyr)
library(forcats)
library(hrbrthemes)
library(viridis)
data <- read.table("https://raw.githubusercontent.com/zonination/perceptions/master/probly.csv", header=TRUE, sep=",")
# Data is at wide format, we need to make it 'tidy' or 'long'
data <- data %>%
gather(key="text", value="value") %>%
mutate(text = gsub("\\.", " ",text)) %>%
mutate(value = round(as.numeric(value),0)) %>%
filter(text %in% c("Almost Certainly","Very Good Chance","We Believe","Likely","About Even", "Little Chance", "Chances Are Slight", "Almost No Chance"))
View(data)
size(indices,2)
size(indices,1)
size(indices)
indices
length(indices)
length(indices,2)
?size
?length
data_plt <- data.frame(text = c(rep("W", length(indices$W_mean_diff)),
rep("R²", length(indices$R2_mean_diff))),
value = c(indices$W_mean_diff, indices$R2_mean_diff))
p <- data_plt %>%
ggplot(aes(x = text, y = value, fill =  text, color = text)) +
geom_violin(width = 2.1, size = 0.3) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none"
)
library(tidyr)
library(forcats)
library(hrbrthemes)
library(hrbrthemes)
?hrbrthemes
install.packages(hrbrthemes)
install.packages("hrbrthemes")
library(hrbrthemes)
library(viridis)
# Load dataset from github
indices <- read.csv("./output/mean_indices_MED.csv")
data_plt <- data.frame(text = c(rep("W", length(indices$W_mean_diff)),
rep("R²", length(indices$R2_mean_diff))),
value = c(indices$W_mean_diff, indices$R2_mean_diff))
p <- data_plt %>%
ggplot(aes(x = text, y = value, fill =  text, color = text)) +
geom_violin(width = 2.1, size = 0.3) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none"
)
p <- data_plt %>%
ggplot(aes(x = text, y = value, fill =  text, color = text)) +
geom_violin(width = 2.1, size = 0.3) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none"
)
p
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
warnings()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
warnings()
windowsFonts()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
warnings
wanings()
warnings()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
warnings()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("wesanderson")
library(ggplot2)
library(wesanderson)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(wesanderson)
# Load dataset from github
indices <- read.csv("./output/mean_indices_MED.csv")
data_plt <- data.frame(text = c(rep("W", length(indices$W_mean_diff)),
rep("R²", length(indices$R2_mean_diff))),
value = c(indices$W_mean_diff, indices$R2_mean_diff))
p <- data_plt %>%
ggplot(aes(x = text, y = value, fill =  text, color = text)) +
geom_violin(width = 0.8, size = 1, col = wes.palette(n=2, name="Zissou")) +
geom_boxplot(width=0.1, fill="grey", color = "grey") +
geom_hline(yintercept = 0)+
theme(
legend.position="none",
text = element_text(size = 22),
)+
coord_flip() + # This switch X and Y axis and allows to get the horizontal version
xlab("") +
ylab("Paired difference between the referential frames")
?wes_palette
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
col = wes_palette(n=2, name="Zissou1")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?ylab
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?geom_hline
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
warnings()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
theme
theme.grid.major
theme.panel.grid.major
panel.grid.major
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
